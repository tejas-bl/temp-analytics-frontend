import React from "react";
import { connect } from "react-redux";
import { subDays } from "date-fns";
import { getTopCompetitorsAdvertising, getTopCompetitorsProducts, getTopInjectionTypes, getTopMaliciousPages } from "../../api/shieldDashboard";
import TopFiveMaliciousScript from "../../components/Shield/TopFiveMaliciousScript";
import TopInjectionsByType from "../../components/Shield/TopInjectionsByType";
import { convertDateTOLocale, getCurrentUser } from "../../helper/Utils";
import {
    websiteRecordAction
} from "../../actions";
import PageHeader from "../../components/PageHeader";
import PdfDownloader from "../../helper/PdfDownloader";
import DateRange from "../../helper/DateRange";
import Loader from "../../helper/Loader";
import TopCompetitorsAdvertising from "../../components/Shield/TopCompetitorsAdvertising";
import TopCompetitorsProducts from "../../components/Shield/TopCompetitorsProducts";
// import { topFiveMaliciousScriptData, topInjectionByTypeData } from "../../Data/MalwareInsightsData";

class MalwareInsights extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            siteIdInput: this.props.sessionClient.web_id,
            startDate: subDays(new Date(), 30),
            endDate: new Date(),
            topInjectionTypes: {},
            topInjectionTypesLoading: true,
            topCompetitorsAdvertising: {},
            topCompetitorsAdvertisingLoading: true,
            topCompetitorsProducts: {},
            topCompetitorsProductsLoading: true,
            topMaliciousPages: {},
            topMaliciousPagesLoading: true,
            message: "",
            loading: {
                status: false,
                message: ""
            }
        };
        this.downloadMalwareInsightsRef = React.createRef();
        this.handleDateChange = this.handleDateChange.bind(this);
    }
    async componentDidMount() {

        const { startDate, endDate } = this.state;
        const siteIdInput = this.props.sessionClient.web_id;
        const siteInputs = { siteIdInput, startDate: convertDateTOLocale(startDate), endDate: convertDateTOLocale(endDate) };
        const headerConfigPassed = {
            headers: {
                Authorization: getCurrentUser() && getCurrentUser().hasOwnProperty('data') && `Bearer ${getCurrentUser().data.data.refresh_token}`,
            }
        }
        this.setState({
            loading: {
                status: true,
                message: "loading",
            }
        })

        const [getTopInjectionTypesData, getTopCompetitorsAdvertisingData,
            getTopCompetitorsProductsData,
            getTopMaliciousPagesData] = await Promise.all([
                getTopInjectionTypes(siteInputs, headerConfigPassed),
                getTopCompetitorsAdvertising(siteInputs, headerConfigPassed),
                getTopCompetitorsProducts(siteInputs, headerConfigPassed),
                getTopMaliciousPages(siteInputs, headerConfigPassed)
            ])

        this.setState({
            topInjectionTypes: getTopInjectionTypesData,
            topInjectionTypesLoading: false,
            topCompetitorsAdvertising: getTopCompetitorsAdvertisingData,
            topCompetitorsAdvertisingLoading: false,
            topCompetitorsProducts: getTopCompetitorsProductsData,
            topCompetitorsProductsLoading: false,
            topMaliciousPages: getTopMaliciousPagesData,
            topMaliciousPagesLoading: false,
            loading: {
                status: false,
                message: ""
            }
        })
        // getTopInjectionTypes(siteInputs, headerConfigPassed).then(res => {

        //     this.setState({
        //         topInjectionTypes: res,
        //         topInjectionTypesLoading: false,
        //         loading: {
        //             status: false,
        //             message: ""
        //         }
        //     })
        // }, err => {
        //     return err;
        // })

        // getTopCompetitorsAdvertising(siteInputs, headerConfigPassed).then(res => {
        //     this.setState({
        //         topCompetitorsAdvertising: res,
        //         topCompetitorsAdvertisingLoading: false,
        //         loading: {
        //             status: false,
        //             message: ""
        //         }
        //     })
        // }, err => {
        //     return err;
        // })

        // getTopCompetitorsProducts(siteInputs, headerConfigPassed).then(res => {
        //     this.setState({
        //         topCompetitorsProducts: res,
        //         topCompetitorsProductsLoading: false,
        //         loading: {
        //             status: false,
        //             message: ""
        //         }
        //     })
        // }, err => {
        //     return err;
        // })

        // getTopMaliciousPages(siteInputs, headerConfigPassed).then(res => {
        //     this.setState({
        //         topMaliciousPages: res,
        //         topMaliciousPagesLoading: false,
        //         loading: {
        //             status: false,
        //             message: ""
        //         }
        //     })
        // }, err => {
        //     return err;
        // })
        // this.chartPlace();
    }

    async componentDidUpdate(prevProps) {
        if (this.props.sessionClient.web_id !== prevProps.sessionClient.web_id) {
            this.setState({
                loading: {
                    status: true,
                    message: "loading"
                }
            })
            const siteInputs = { siteIdInput: this.props.sessionClient.web_id, startDate: convertDateTOLocale(this.state.startDate), endDate: convertDateTOLocale(this.state.endDate) };
            const headerConfigPassed = {
                headers: {
                    Authorization: getCurrentUser() && getCurrentUser().hasOwnProperty('data') && `Bearer ${getCurrentUser().data.data.refresh_token}`,
                }
            }

            const [getTopInjectionTypesData, getTopCompetitorsAdvertisingData,
                getTopCompetitorsProductsData,
                getTopMaliciousPagesData] = await Promise.all([
                    getTopInjectionTypes(siteInputs, headerConfigPassed),
                    getTopCompetitorsAdvertising(siteInputs, headerConfigPassed),
                    getTopCompetitorsProducts(siteInputs, headerConfigPassed),
                    getTopMaliciousPages(siteInputs, headerConfigPassed)
                ])

            this.setState({
                topInjectionTypes: getTopInjectionTypesData,
                topInjectionTypesLoading: false,
                topCompetitorsAdvertising: getTopCompetitorsAdvertisingData,
                topCompetitorsAdvertisingLoading: false,
                topCompetitorsProducts: getTopCompetitorsProductsData,
                topCompetitorsProductsLoading: false,
                topMaliciousPages: getTopMaliciousPagesData,
                topMaliciousPagesLoading: false,
                loading: {
                    status: false,
                    message: ""
                }
            })

        }
    }
    async handleDateChange(item) {
        const siteIdInput = this.props.sessionClient.web_id;
        const startDate = convertDateTOLocale(item[0].startDate);
        const endDate = convertDateTOLocale(item[0].endDate);

        const headerConfigPassed = {
            headers: {
                Authorization: getCurrentUser() && getCurrentUser().hasOwnProperty('data') && `Bearer ${getCurrentUser().data.data.refresh_token}`,
            }
        }
        this.setState({
            loading: {
                status: true,
                message: "loading"
            },
            startDate: item[0].startDate,
            endDate: item[0].endDate
        })

        const siteInputs = { siteIdInput, startDate, endDate };

        const [getTopInjectionTypesData, getTopCompetitorsAdvertisingData,
            getTopCompetitorsProductsData,
            getTopMaliciousPagesData] = await Promise.all([
                getTopInjectionTypes(siteInputs, headerConfigPassed),
                getTopCompetitorsAdvertising(siteInputs, headerConfigPassed),
                getTopCompetitorsProducts(siteInputs, headerConfigPassed),
                getTopMaliciousPages(siteInputs, headerConfigPassed)
            ])

        this.setState({
            topInjectionTypes: getTopInjectionTypesData,
            topInjectionTypesLoading: false,
            topCompetitorsAdvertising: getTopCompetitorsAdvertisingData,
            topCompetitorsAdvertisingLoading: false,
            topCompetitorsProducts: getTopCompetitorsProductsData,
            topCompetitorsProductsLoading: false,
            topMaliciousPages: getTopMaliciousPagesData,
            topMaliciousPagesLoading: false,
            loading: {
                status: false,
                message: ""
            }
        })

    }

    render() {
        const { topInjectionTypes, topMaliciousPages, topCompetitorsAdvertising, topCompetitorsProducts } = this.state;

        return (
            <div className="container-fluid">



                <div className="row clearfix">
                    <div className="col-lg-6 col-md-4">
                        <PageHeader
                            HeaderText="Dashboard"
                            Breadcrumb={[{ name: "Dashboard" }]}
                        />
                    </div>

                    <div className="col-lg-6 col-md-6">

                        <div className="row dashboardActionButtons" >
                            <div className="text-right pr-0  mr-3">
                                <PdfDownloader downloadFileName="MalwareInsights" rootElementId="downloadMalwareInsightsRef" />
                            </div>
                            <div className="text-right pl-0  mr-3">
                                <form onSubmit={(e) => this.handleGetGADataSubmit(e)}>
                                    {/* <input className="flex-grow-1 mr-4" type="text" placeholder="Enter Site ID" value={this.state.siteIdInput} onChange={(e) => this.setState({
                                    siteIdInput: e.target.value
                                        })} required /> */}
                                    <DateRange startDate={this.state.startDate} endDate={this.state.endDate} onDateRangeChange={this.handleDateChange} />
                                    {/* <Button disabled={!this.state.siteIdInput || this.state.startDate === "" || this.state.endDate === ""} type="submit" className="btn btn-info btn-info text-white float-right mr-2"><span>Submit</span></Button> */}
                                </form>
                            </div>
                        </div>

                    </div>
                </div>
                {/* 
                <div className="row clearfix">

                    <div className="col-lg-4 col-md-4 mb-3">
                        <PdfDownloader downloadFileName="MalwareInsights" rootElementId="downloadMalwareInsightsRef" />
                    </div>
                    <div className="col-lg-8 col-md-8 mb-3">
                        <form onSubmit={(e) => this.handleGetGADataSubmit(e)} className=" d-flex justify-content-end">
                            <DateRange startDate={this.state.startDate} endDate={this.state.endDate} onDateRangeChange={this.handleDateChange} />
                       </form>
                    </div>
                    <div className="col-lg-12 col-md-12 mb-3 text-center">
                        <span className="text-danger">{this.state.message}</span>
                    </div>
                </div> */}
                <div id="downloadMalwareInsightsRef" ref={this.downloadMalwareInsightsRef}>
                    <div className="row clearfix">

                        <div className="col-lg-12 col-md-12">
                            <div className="body">
                                {(this.state.loading.status) ?
                                    <Loader width="col-md-12 col-lg-12" height="150px" /> :
                                    <TopInjectionsByType className="dbCard" topInjectionTypes={!this.state.topInjectionTypesLoading && topInjectionTypes} />
                                }
                            </div>
                        </div>

                        <div className="col-lg-12 col-md-12">
                            <div className="body">
                                {(this.state.loading.status) ?
                                    <Loader width="col-md-12 col-lg-12" height="150px" /> :
                                    <TopFiveMaliciousScript className="dbCard" topMaliciousPages={!this.state.topMaliciousPagesLoading && topMaliciousPages} />
                                }
                            </div>
                        </div>

                        {/* <div className="col-lg-9 col-md-9 p-0">
                            <>
                                {(this.state.loading.status) ?
                                    <Loader width="col-md-12 col-lg-12" height="150px" /> :
                                    <ShieldMetricTableCard data={!this.state.metricsDataLoading && metricsData} />
                                }
                            </>
                        </div> */}
                    </div>

                    <div className="row clearfix">
                        <div className="col-md-6 col-lg-6">
                            <div className="body">
                                {(this.state.loading.status) ?
                                    <Loader width="col-md-12 col-lg-12" height="150px" /> :
                                    <TopCompetitorsAdvertising className="dbCard" topCompetitorsAdvertising={!this.state.topCompetitorsAdvertisingLoading && topCompetitorsAdvertising} />
                                }
                            </div>
                        </div>
                        <div className="col-md-6 col-lg-6">
                            <div className="body">
                                {(this.state.loading.status) ?
                                    <Loader width="col-md-12 col-lg-12" height="150px" /> :
                                    <TopCompetitorsProducts className="dbCard" topCompetitorsProducts={!this.state.topCompetitorsProductsLoading && topCompetitorsProducts} />
                                }
                            </div>
                        </div>
                    </div>
                </div>


            </div>
        );
    }
}


const mapStateToProps = ({
    websiteRecordReducer
}) => ({
    sessionClient: websiteRecordReducer.sessionClient,
    websiteRecord: websiteRecordReducer.websiteRecord
});

export default connect(mapStateToProps, {
    websiteRecordAction
})(MalwareInsights);
